/***************************** BEGIN LICENSE BLOCK ***************************

The contents of this file are subject to the Mozilla Public License, v. 2.0.
If a copy of the MPL was not distributed with this file, You can obtain one
at http://mozilla.org/MPL/2.0/.

Software distributed under the License is distributed on an "AS IS" basis,
WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
for the specific language governing rights and limitations under the License.
 
Copyright (C) 2012-2015 Sensia Software LLC. All Rights Reserved.
 
******************************* END LICENSE BLOCK ***************************/

package org.sensorhub.impl.service.sos;

import java.util.Iterator;
import net.opengis.gml.v32.AbstractFeature;
import net.opengis.sensorml.v20.AbstractProcess;
import org.sensorhub.api.common.SensorHubException;
import org.sensorhub.api.persistence.IFoiFilter;
import org.vast.ows.sos.SOSOfferingCapabilities;


/**
 * <p>
 * Common interface for all data provider factories.
 * </p>
 * <p>
 * One data provider factory is created for each offering and is persistent
 * throughout the lifetime of the service, so it must be threadsafe.
 * </p>
 * <p>
 * However, the server obtains a new data provider instance from the factory
 * for each incoming request so the providers themselves don't need to be
 * threadsafe. 
 * </p>
 *
 * @author Alex Robin <alex.robin@sensiasoftware.com>
 * @since Sep 7, 2013
 */
public interface ISOSDataProviderFactory
{

    /**
     * @return the configuration of this provider 
     */
    public SOSProviderConfig getConfig();
    
    
    /**
     * Allows to check if provider is enabled
     * @return true if enabled, false otherwise
     */
    public boolean isEnabled();
    
    
    /**
     * Builds the offering capabilities using the provider configuration
     * This will connect to source providers to retrieve the necessary metadata
     * @return SOS capabilities object containing the maximum of metadata
     * @throws SensorHubException 
     */
    public SOSOfferingCapabilities generateCapabilities() throws SensorHubException;
    
    
    /**
     * Update capabilities previously generated by this provider if needed.
     * The object updated must be the one returned by {@link #generateCapabilities()}
     * @throws SensorHubException 
     */
    public void updateCapabilities() throws SensorHubException;
        
    
    /**
     * Retrieves the SensorML description associated to this data source
     * @param time Time at which the description should be valid 
     * @return the SensorML process object describing the sensor
     * @throws SensorHubException 
     */
    public AbstractProcess generateSensorMLDescription(double time) throws SensorHubException;
    
    
    /**
     * Retrieves iterator among features of interest matching the filter
     * @param filter feature filtering criterias
     * @return read-only iterator (remove method does nothing)
     * @throws SensorHubException
     */
    public Iterator<AbstractFeature> getFoiIterator(IFoiFilter filter) throws SensorHubException;
    
    
    /**
     * Instantiates a new data provider
     * @param filter
     * @return sos data provider
     * @throws SensorHubException
     */
    public ISOSDataProvider getNewDataProvider(SOSDataFilter filter) throws SensorHubException;
    
    
    /**
     * Called when the provider is removed
     */    
    public void cleanup();

}